package server;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.InputMismatchException;
import java.util.Scanner;

import controllers.GameController;
import models.ComputerPlayer;
import models.Game;
import models.HumanPlayer;
import models.Player;
import view.BoardTUI;
import view.StartTUI;

import java.lang.Thread;


public class Client extends Thread {
	
	private static final String USAGE
    = "usage: Qwirkle.server.Client <address> <port>";
	private static final int AMOUNT_CHARACTERS = 75;
	private String string = "";
	private int clientID;
	private StartTUI ui;
	private BoardTUI bui;
	private GameController gc;
	private String clientName;
	protected String playerName;
	private Game game;
	private Player player;
	private Socket sock;
	private Scanner scanner;
	private boolean isHuman;
	private BufferedReader in;
	private BufferedWriter out;
	Scanner uInput = new Scanner(System.in);
	protected static final String[] NAME_MENU = {null, "Voer uw naam in:"};
	
	public static void main(String[] args) throws IOException{
		Client client = new Client();
		client.start();
	}
	
	public void start(){
		ui.start();
		if (isHuman == true) {
		createLocalPlayer(playerName);
		((HumanPlayer) player).addObserver(bui);
		} else {
			Player pc = new ComputerPlayer(game);
			((ComputerPlayer) pc).addObserver(bui);
		}
	}
	
	public Client() throws IOException {
		ui = new StartTUI(gc);
		bui = new BoardTUI(gc, game);
		
		
	}
	
	public void createLocalPlayer(String name){
		player = new HumanPlayer(name, game);
	}
	
	public void run() {
		/*try {
			String text = in.readLine();
			while(text != null && !text.toLowerCase().equals("EXIT")){
				System.out.println(text);
				text = in.readLine();
			}
			if (text == "EXIT"){
				shutdown();
			}
		} catch(NullPointerException e){
			System.err.println("ERROR: NO INPUT");
		
		} catch(IOException e){
			e.printStackTrace();
		}
		try{
			shutdown();
		} catch(IOException e) {
			e.printStackTrace();
		}*/
		
		
		
	}
	
	public void setClientID(){
		//TODO implement dit via server
	}
	public void renderMenu(String[] menuItems){
		if(menuItems[0] != null && menuItems[0].contains("[naam]")){
			menuItems[0] = menuItems[0].replace("[naam]", playerName);
			System.out.println(menuItems[0]);
		}
		for(int i = 1; i < menuItems.length; i++){
			System.out.println(menuItems[i] + dots(menuItems[i]) + i);
		}
		if(menuItems.equals(NAME_MENU)){
			System.out.print("Typ uw naam en druk op enter: ");
		}else{
			System.out.print("\n" + "Voer uw keuze in:" + dots("Voer uw keuze in: ") + ".");
		}
	}
	
	public String dots(String string){
		int stringLength = string.toCharArray().length;
		String dots = "";
		for(int i = 0; i < AMOUNT_CHARACTERS - stringLength; i++){
			dots += ".";
		}
		return dots;
	}

	public int determineOption(){
		int in = 0;
		while (true) {
			scanner = new Scanner(System.in);
			try {
				in = scanner.nextInt();
				break;
			} catch (InputMismatchException e) {
				System.out.println("Voer een nummer in");
			}
		}
		return in;
	}
	public String determineString(){
		String string = "";
		while (true) {
			scanner = new Scanner(System.in);
			string = scanner.nextLine();
			break;
		}
		return string;
	}
	
	public void createSpace(){
		System.out.print("\n \n");
	}
		
	
	
	public int getClientID(){
		return clientID;
	}
	
	public void sendCommand(String command){
		try {
			out.write(command);
			out.newLine();
			out.flush();
		} catch (IOException e) {
			System.err.println(e.getMessage());
		}
	}
	
	
	public void shutdown() throws IOException{
		System.out.print("Closing socket connection...");
    	sock.close();
		in.close();
    	out.close();
	}
	
	public static String readString(String tekst) {
		return tekst;
	}

}
