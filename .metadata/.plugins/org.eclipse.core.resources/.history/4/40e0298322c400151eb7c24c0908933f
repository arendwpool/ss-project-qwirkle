package models;

import java.util.ArrayList;
import java.util.Observable;

import exceptions.FullGameException;
import exceptions.InvalidMoveException;
import exceptions.NoTilesLeftInPileException;
import util.MoveUtils;

/**
 * Maakt een speler met enige vorm van kunstmatige intelligentie
 * @author Arend Pool en Bob breemhaar
 *
 */
public class ComputerPlayer extends ClientPlayer {
	private ArrayList<Tile> hand;
	private String name;
	private int score;
	public boolean moveMade = false;
	
	/**
	 * Koppelt de speler aan een spel.
	 */
	private Game game;
	
	/**
	 * Constreerd een nieuwe speler.
	 * @param game
	 */
	public ComputerPlayer(String name) {
		hand = new ArrayList<Tile>();
		this.name = name;
		score = 0;
		try {
			game.addPlayer(this);
		} catch (FullGameException e) {
			//TODO implement
		}
	}
	
	/**
	 * Geeft de naam van deze speler terug.
	 */
	@Override
	public String getName() {
		return name;
	}
	
	/**
	 * Bepaald de volgende zet van de Computer. Hiervoor controlleerd de computer eerst
	 * of het vakje in het midden leeg is, hier moet namelijk altijd de eerste tegel liggen.
	 * Vervolgens kijkt de methode van elk vak of deze leeg is. Als deze niet leeg is 
	 * controlleerd de methode of om deze tegel heen een tegel kan liggen die er mag liggen
	 * volgens de spelregels. Als dit kan legt de computer hier de tegel neer. Anders kijkt
	 * de Computer of een andere tegel wel ergens kan liggen. Als de Computer geen tegels
	 * heeft die ergens kan liggen zal deze een tegel ruilen.
	 */
	@Override
	public void determineMove() {
		if (game.getBoard().isEmptyField(90, 90)) {
			makeMove(90, 90, hand.get(0));
		} else {
			tileLoop:
			for(Tile tile: hand){
				for(int x = 0; x < Board.DIM; x++){
					for(int y = 0; y < Board.DIM; y++){
						if (!game.getBoard().isEmptyField(x, y)) {
							if(MoveUtils.isValidMove((x+1), (y), tile, game.getBoard())){
								makeMove(x+1, y, tile);
								break tileLoop;
							} else if (MoveUtils.isValidMove(x-1, y, tile, game.getBoard())) {
								makeMove(x-1, y, tile);
								break tileLoop;
							} else if (MoveUtils.isValidMove(x, y-1, tile, game.getBoard())) {
								makeMove(x, y-1, tile);
								break tileLoop;
							} else if (MoveUtils.isValidMove(x, y+1, tile, game.getBoard())) {
								makeMove(x, y+1, tile);
								break tileLoop;
							}
						}
					}
				}
			}
			if(MoveUtils.madeMove() == false){
				try {
					ArrayList<Tile> toTrade = new ArrayList<Tile>();
					toTrade.add(hand.get(1));
					MoveUtils.replaceTiles(toTrade, this, game.getPile());
					signalController();
				} catch (NoTilesLeftInPileException | InvalidMoveException e) {
					System.out.println("Er zijn geen tegels meer in de zak.");
				}
			}
		}
	}	
	
	/**
	 * Geeft de tegels in de hand van deze speler terug.
	 */
	@Override
	public ArrayList<Tile> getHand() {
		return hand;
	}

	/**
	 * Geeft de score van deze speler terug.
	 */
	@Override
	public int getScore() {
		return score;
	}

	/**
	 * Zorgt dat de move aan het spel wordt doorgegeven, zodat deze hem kan verwerken.
	 */
	@Override
	public void makeMove(int x, int y, Tile tile) {
		try {
			game.makeMove(x, y, tile, this);
			signalController();
		} catch (InvalidMoveException e) {
			System.out.println("Er is iets fout gegaan met de computerspeler");
		}
	}

	/**
	 * Geeft aan de TUI aan dat er een move is gemaakt. Deze geeft dit weer door aan
	 * de controller.
	 */
	public void signalController(){
		setChanged();
		notifyObservers("MadeMove");
	}
	
	/**
	 * Voegt een gegeven aantal punten aan de speler.
	 */
	@Override
	public void addScore(int points) {
		score += points;		
	}

}
