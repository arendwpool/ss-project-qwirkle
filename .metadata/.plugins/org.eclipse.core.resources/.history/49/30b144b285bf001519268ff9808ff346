package view;

import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import java.util.Scanner;

import models.Game;
import models.Tile;


public class TUI implements Observer {
	/**
	 * De string op index 0 is altijd een beschrijving bij een menu
	 */
	private static final String[] PRE_MENU = {null, "Ik ben een Menselijke speler", "Ik ben een Computerspeler"};
	private static final String[] NAME_MENU = {null, "Voer uw naam in:"};
	private static final String[] MAIN_MENU = {"Hallo [naam]! Onderstaande opties zijn te selecteren door het gepaste nummer in te voeren.", "IP adres invoeren", "Aantal tegenstanders", "Start", "Afsluiten"};
	private static final String[] IP_MENU = {null, "Voer het gewenste adres in:"};
	private static final String[] OPPONENTS_MENU = {"Typ in hoeveel tegenstanders u wil hebben(minimaal 1, maximaal 3).", "Aantal tegenstanders: "};
	private static final String[] BOARD_MENU = {"Als u aan de beurt ben kan u tegels ruilen of neerleggen. Dit gaat per tegel, aan het eind van uw beurt drukt u op: klaar.", "Een tegel neerleggen: ", "Een tegel ruilen", "Klaar"};
	private static final String[] SET_TILE_MENU = {"Typ uw keuze in de vorm: [kleur] [symbool] [x] [y]", "Uw keuze:"}; //TODO veranderen in [tegelnummer].[x].[y]
	private static final String[] SWAP_TILE_MENU = {"Typ uw keuze in de vorm: tegelnummer tegelnummer etc.", "Uw keuze"};
	
	private static final int AMOUNT_CHARACTERS = 50;
	private String playerName;
	private Scanner scanner = new Scanner(System.in);
	boolean terminated = false;
	private int noOfPlayers;
	private String ip ="1";
	private Game game;
	
	
	public TUI(Game game){
		this.game = game;
	}
	
	@Override
	public void update(Observable arg0, Object arg1) {
		// TODO Auto-generated method stub

	}

	public void start(){
		renderMenu(PRE_MENU);
		int choice = determineOption();
		if (choice == 1) {
			createSpace();
			renderMenu(NAME_MENU);
			playerName = determineString();
			createSpace();
			while(!isValidIP(ip)){
				renderMenu(MAIN_MENU);
				choice = determineOption();
				createSpace();
				if (choice == 1) {
					renderMenu(IP_MENU);
					String ip = determineString();
					while (!isValidIP(ip)) {
						System.out.println("Niet geldig ip adres...");
						renderMenu(IP_MENU);
						ip = determineString();
					}
					this.ip = ip;
				}
			}
		}
	}
	
	public String getPlayerName(){
		return playerName;
	}
	
	public void renderBoard(){
		for (int y = game.getBoard().viewOfMaxY; y >= game.getBoard().viewOfMinY; y--){
			for(int x = game.getBoard().viewOfMinX; x <= game.getBoard().viewOfMaxX; x++){
				if (game.getBoard().getField(x, y).getColor() == "empty" && game.getBoard().getField(x, y).getSymbol() == "empty"){
					System.out.print("|" +(x-90) +"," + (y-90) +"|");
					if(x == (game.getBoard().viewOfMaxX)){
						System.out.println();
					}
				}else{
					System.out.print("|-"+colorRepresentive(game.getBoard().getField(x, y).getColor())+ "-" + symbolRepresentive(game.getBoard().getField(x, y).getSymbol()) +"-|");
					if(y == (game.getBoard().viewOfMaxY)){
						System.out.println();
					}
				}
			}
		}
	}
	
	/**
	 * 
	 * @param noMenuItems
	 * @param menuItems(op index 0 altijd een uitleg bij een menu! zonder uitleg null houden!
	 */
	public void renderMenu(String[] menuItems){
		if(menuItems[0] != null && menuItems[0].contains("[naam]")){
			menuItems[0] = menuItems[0].replace("[naam]", playerName);
			System.out.println(menuItems[0]);
		}
		for(int i = 1; i < menuItems.length; i++){
			System.out.println(menuItems[i] + dots(menuItems[i]) + i);
		}
		if(menuItems.equals(NAME_MENU)){
			System.out.print("Typ uw naam en druk op enter: ");
		}else{
			System.out.print("\n" + "Voer uw keuze in:" + dots("Voer uw keuze in: ") + ".");
		}
	}
	
	public String dots(String string){
		int stringLength = string.toCharArray().length;
		String dots = "";
		for(int i = 0; i < AMOUNT_CHARACTERS - stringLength; i++){
			dots += ".";
		}
		return dots;
	}

	public int determineOption(){
		int in = scanner.nextInt();
		return in;
	}
	public String determineString(){
		String string = scanner.next();
		return string;
	}
	
	public void createSpace(){
		System.out.print("\n \n");
	}
	
	public boolean isValidIP(String ip){
		ip = ip.replace(".", " ");
		String[] ints = ip.split(" ");
		boolean isValidInt = true;
		for(String integer : ints){
			int i = Integer.parseInt(integer);
				if(i > 255){
					isValidInt = false;
				}
		}
		return (isValidInt == true && ints.length == 4);
	}
	
	public String colorRepresentive(String color){
		String representive = "";
		if(color.equals("groen")){
			representive = "G";
		}else if (color.equals("rood")){
			representive = "R";
		}else if (color.equals("blauw")){
			representive = "B";
		}else if (color.equals("paars")){
			representive = "P";
		}else if (color.equals("geel")){
			representive = "Y";
		}else if (color.equals("oranje")){
			representive = "O";
		}
		return representive;
	}
	
	public String symbolRepresentive(String symbol){
		String representive = "";
		if(symbol.equals("circel")){
			representive = "C";
		}else if (symbol.equals("ruit")){
			representive = "R";
		}else if (symbol.equals("plus")){
			representive = "P";
		}else if (symbol.equals("ster")){
			representive = "S";
		}else if (symbol.equals("vierkant")){
			representive = "V";
		}else if (symbol.equals("kruis")){
			representive = "K";
		}
		return representive;
	}
	
}
