package models;

import protocol.Protocol;

public class Server2 {

	public void getClientMessage(String msg) {
		String[] slicedMessage = msg.split(Protocol.MESSAGESEPERATOR);
		switch(slicedMessage[0]) {
			case Protocol.CLIENT_CORE_JOIN: join();
			break;
			case Protocol.CLIENT_CORE_START: start();
			break;
			case Protocol.CLIENT_CORE_EXTENSION: ex(slicedMessage);
			break;
			case Protocol.CLIENT_CORE_LOGIN: login(slicedMessage[1]);
			break;
			case Protocol.CLIENT_CORE_SWAP: swap(slicedMessage[1], slicedMessage[2]);
			break;
			case Protocol.CLIENT_CORE_DONE: done();
			break;
			case Protocol.CLIENT_CORE_MOVE: move(slicedMessage[1], slicedMessage[2], slicedMessage[3], slicedMessage[4]);
			break;
		}
	}
	
	private void move(String x, String y, String shape, String color) {
	}

	private void done() {
	}

	private void swap(String shape, String color) {
	}

	private void login(String name) {
	}

	private void join() {
	}

	private void ex(String[] extensions) {
	}

	public void start() {
	}
}
