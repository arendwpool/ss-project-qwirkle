package tests;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;

import exceptions.FullGameException;
import exceptions.NoTilesLeftInPileException;
import models.Board;
import models.Game;
import models.HumanPlayer;
import models.Player;
import models.Tile;

/**
 * 
 * @author Bob Breemhaar en Arend Pool
 *
 */
public class GameTest {

	/**
	 * Declareert een Spel om de tests mee te draaien.
	 */
	private Game testGame;
	private Player testPlayer;
	
	@Before
	public void setUp() throws Exception {
		testGame = new Game(new Board());
		//testPlayer = new HumanPlayer("test");
	}
	
	@Test
	public void testReplaceTiles(){
		ArrayList<Tile> tilesToTrade = new ArrayList<Tile>();
		tilesToTrade.add(testPlayer.getHand().get(0));
		tilesToTrade.add(testPlayer.getHand().get(1));
		tilesToTrade.add(testPlayer.getHand().get(3));
		try {
			testGame.replaceTiles(tilesToTrade, testPlayer);
		} catch (NoTilesLeftInPileException e) {
			//Gebeurt niet in deze test
			System.out.print("FOUT");
		}
	}
	
	@Test
	public void testGiveRandomTile(){
		Tile tile = testGame.giveRandomTile();
		assertTrue(tile != null);
		System.out.print(tile.getColor() + tile.getSymbol());
	}
	
	@Test
	public void testSetHand(){
		assertTrue("De hand is leeg", testPlayer.getHand().size() == 0);
		testGame.setHand(testPlayer);
		assertFalse("De hand heeft geen null tegels", testPlayer.getHand().contains(null));
		assertTrue("De hand heeft 6 tegels", testPlayer.getHand().size() == 6);
		
	}
	
	@Test
	public void testAddPlayer(){
		try{
			testGame.addPlayer(testPlayer);
			testGame.addPlayer(new HumanPlayer("naam", new Game(new Board())));//TODO parameter game weghalen)
			testGame.addPlayer(new HumanPlayer("andere", new Game(new Board())));
		}catch(FullGameException e){
			//
		}
		assertTrue("Er zijn nu 3 spelers", testGame.getPlayers().keySet().size() == 3);
		try{
			testGame.addPlayer(new Player("error"), new Game(new Board()));
		}catch(FullGameException e){
			assertTrue("Er is een error", e != null);
		}
	}
	//TODO te testen: generateScore, finishMove, noTilesLeft, hasWinner, winner en gameOver
}
