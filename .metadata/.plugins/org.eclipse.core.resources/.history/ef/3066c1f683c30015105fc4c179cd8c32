package models;

import java.io.IOException;
import java.net.ServerSocket;
import java.util.Scanner;

import protocol.Protocol;
import view.StartTUI;

public class Server2 {
	private int port = 1337;
	private ServerSocket server;

	public void getClientMessage(String msg) {
		String[] slicedMessage = msg.split(Protocol.MESSAGESEPERATOR);
		switch(slicedMessage[0]) {
			case Protocol.CLIENT_CORE_JOIN: join();
			break;
			case Protocol.CLIENT_CORE_START: start();
			break;
			case Protocol.CLIENT_CORE_EXTENSION: ex(slicedMessage);
			break;
			case Protocol.CLIENT_CORE_LOGIN: login(slicedMessage[1]);
			break;
			case Protocol.CLIENT_CORE_SWAP: swap(slicedMessage[1], slicedMessage[2]);
			break;
			case Protocol.CLIENT_CORE_DONE: done();
			break;
			case Protocol.CLIENT_CORE_MOVE: move(slicedMessage[1], slicedMessage[2], slicedMessage[3], slicedMessage[4]);
			break;
		}
	}
	
	public void run() {
		StartTUI ui = new StartTUI(null);
		System.out.println("Toets een gewenst portnummer in, typ 0 voor de standaard poort: ");
		readPort(ui);
		while (true) {
			try {
				server = new ServerSocket(port);
				break;
			} catch (IOException e) {
				System.out.println("Het ingevoerde nummer is ongeldig, probeer opnieuw of typ 0 voor de standaard poort: ");
			}
		}
	}

	private void readPort(StartTUI ui) {
		Scanner scanner = new Scanner(System.in);
		int input = ui.determineOption();
		scanner.close();
		if (input > 0) {
			port = input;
		}
	}
	
	private void move(String x, String y, String shape, String color) {
	}

	private void done() {
	}

	private void swap(String shape, String color) {
	}

	private void login(String name) {
	}

	private void join() {
	}

	private void ex(String[] extensions) {
	}

	public void start() {
	}
}
