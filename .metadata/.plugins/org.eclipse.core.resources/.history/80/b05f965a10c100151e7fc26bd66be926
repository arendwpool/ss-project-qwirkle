package models;

import java.util.ArrayList;

import util.MoveUtils;

/**
 *De klasse die een speelbord representeerd maakt met een naam en tegels.
 * @author Bob Breemhaar en Arend Pool.
 *
 */
public class Board {
	/**
	 * creeërt een tweedimensionale array voor de coordinaten.
	 */
	private	Tile[][] coordinaten;
	
	/**
	 * Weergeeft de maximale breedte en hoogte van het bord.
	 */
	public static final int DIM = 179;
	
	/**
	 * geeft de minimale startview van x weer.
	 */
	public int viewOfMinX = 89;
	
	/**
	 * geeft de maximale startview van x weer.
	 */
	public int viewOfMaxX = 91;
	
	/**
	 * geeft de minimale startview van y weer.
	 */
	public int viewOfMinY = 89;
	
	/**
	 * geeft de maximale startview van y weer.
	 */
	public int viewOfMaxY = 91;
	
	/**
	 * geeft het midden punt van x weer.
	 */
	public int startPointX = 90;
	
	/**
	 * geeft het midden punt van y weer.
	 */
	public int startPointY = 90;

	/**
	 * Construeert een bord voor een spel. de coordinaten worden aan
	 */
	public Board() {	
		coordinaten = new Tile[DIM][DIM];
		reset();
	}
	
	
	/**
	 * Creeërt een kopie van het speelveld.
	 * @return board
	 */
	public Board deepCopy() {
		Board board = new Board();
		for (int x = 0; x < DIM; x++) {
			for (int y = 0; y < DIM; y++) {
				board.setTile(x, y, this.getField(x, y));
			}
		}
		return board;
	}
	
	/**
	 * De klasse controlleert de laagste en hoogste x en y as en maakt daarbij
	 * de nieuwe coordinaten van de grote van het bord.
	 */
	
	public void boardSize() {
		for (int x = 0; x < DIM; x++) {
			for (int y = 0; y < DIM; y++) {
				if (isEmptyField(x, y) == false) {
					viewOfMaxX = x + 1;
					break;
				}
			}
		}
		for (int x = DIM - 1; x >= 0; x--) {
			for (int y = 0; y < DIM; y++) {
				if (isEmptyField(x, y) == false) {
					viewOfMinX = x - 1;
					break;
				}
			}
		}
		for (int y = 0; y < DIM; y++) {
			for (int x = 0; x < DIM; x++) {
				if (isEmptyField(x, y) == false) {
					viewOfMaxY = y + 1;
					break;
				}
			}
		}
		for (int y = DIM - 1; y >= 0; y--) {
			for (int x = 0; x < DIM; x++) {
				if (isEmptyField(x, y) == false) {
					viewOfMinY = y - 1;
					break;
				}
			}
		} 
	}
	
	
	/**
	 * returns de inhoud verwezen door het paar (x,y) .
	 */
	public Tile getField(int x, int y) {
		return coordinaten[x][y];
	}
	
	
	/**
	 * returns true als een verwezen field pair(x,y) leeg is.
	 * @return getField(x, y).getColor() == "empty" && getField(x,y).getSymbol() == "empty";
	 */
	public boolean isEmptyField(int x, int y) {
		return getField(x, y).getColor().equals("empty") && getField(x, y).getSymbol().equals("empty");
	}
	
	/**
	 * Deze Arraylist is gemaakt om alle aanliggende tegels te onthouden.
	 * @return xAxis;
	 */
	//TODO eventueel code verbeteren door de hoeveelheid duplicaatcode te verminderen
	public ArrayList<Tile> tilesOnXAxis(int x, int y) {
		boolean leftIsEmpty = false;
		boolean rightIsEmpty = false;
		int xOrig = x;
		ArrayList<Tile> xAxis = new ArrayList<Tile>();
		if(!isEmptyField(x, y)){
			xAxis.add(getField(x, y));
		}
		while (leftIsEmpty == false) {
			if (x != 0) {
				x--;
				if (isEmptyField(x, y) == false) {
					xAxis.add(getField(x, y));
				} else {
					break; 
				}
			} else {
				break;
			}
		}
		x = xOrig;
		while (rightIsEmpty == false) {
			if (x != Board.DIM) {
				x++;
				if (isEmptyField(x, y) == false) {
					xAxis.add(getField(x, y));
				} else {
					break; 
				}
			}
		}
		return xAxis;
	}
	
	/**
	 * Deze Arraylist is gemaakt om alle aanliggende tegels te onthouden.
	 * @return yAxis;
	 */
	public ArrayList<Tile> tilesOnYAxis(int x, int y){
		boolean upperIsEmpty = false;
		boolean lowerIsEmpty = false;
		int yOrig = y;
		ArrayList<Tile> yAxis = new ArrayList<Tile>();
		if(!isEmptyField(x, y)){
			yAxis.add(getField(x, y));
		}
		while (lowerIsEmpty == false) {
			if (y != 0) {
				y--;
				if (isEmptyField(x, y) == false) {
					yAxis.add(getField(x, y));
				} else {
					break; 
				}
			}
		}
		y = yOrig;
		while (upperIsEmpty == false) {
			if (y != Board.DIM) {
				y++;
				if (isEmptyField(x, y) == false) {
					yAxis.add(getField(x, y));
				} else {
					break; 
				}
			}
		}
		return yAxis;
	}
	
	/**
	 * Deze klasse kijkt of alle aangelegde steenjes dezelfde x of y coordinaten hebben.
	 * @param tileToSet
	 * @param axis
	 * @return contains;
	 */
	public boolean validSharedLine(int x, int y, Tile tileToSet) {
		boolean sameX = true;
		boolean sameY = true;
		boolean validSharedLine = false;
		if (MoveUtils.getLastMoves().size()<1){
			return true;
		} else {
			for (Tile tile : MoveUtils.getLastMoves()) {
				if ((int) tile.getLocation().getX() != x) {
					sameX = false;
				}
				if ((int) tile.getLocation().getY() != y) {
					sameY = false;
				}
			}
			if (sameX == true && sameY == false) {
				validSharedLine = true;
			} else if (sameX == false && sameY == true) {
				validSharedLine = true;
			}
			return validSharedLine;
		}
	}
	
	
	
	/**
	 * bind een coordinaat aan een tile.
	 * @param x
	 * @param y
	 * @param tile
	 */
	public void setTile(int x, int y, Tile tile) {
		this.coordinaten[x][y] = tile;
		tile.setLocation(x, y);
	}
	
	/**
	 * Maakt het hele board leeg.
	 */
	public void reset() {
		for (int x = 0; x < DIM; x++) {
			for (int y = 0; y < DIM; y++) {
				setTile(x, y, new Tile("empty", "empty"));
			}
		}
	}
	
	//TODO Hoeveelheid stenen op het bord kunnen controleren checken


}
