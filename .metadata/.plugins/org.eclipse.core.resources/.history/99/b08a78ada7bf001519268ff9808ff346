package view;

import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import java.util.Scanner;

import models.Game;
import models.Tile;


public abstract class TUI implements Observer {
	/**
	 * De string op index 0 is altijd een beschrijving bij een menu
	 */
	private static final String[] PRE_MENU = {null, "Ik ben een Menselijke speler", "Ik ben een Computerspeler"};
	private static final String[] NAME_MENU = {null, "Voer uw naam in:"};
	private static final String[] MAIN_MENU = {"Hallo [naam]!", "Start", "Afsluiten"};
	private static final String[] IP_MENU = {null, "Voer het gewenste ip adres in:"};
	
	private static final int AMOUNT_CHARACTERS = 50;
	protected String playerName;
	private Scanner scanner = new Scanner(System.in);
	boolean terminated = false;
	private String ip;
	private BoardTUI boardUI;
	
	
	public TUI(){
	}
	
	@Override
	public void update(Observable arg0, Object arg1) {
		// TODO Auto-generated method stub

	}

	public void start(){
		renderMenu(PRE_MENU);
		int choice = determineOption();
		if (choice == 1) {
			createSpace();
			renderMenu(NAME_MENU);
			playerName = determineString();
			createSpace();
			renderMenu(IP_MENU);
			String ip = determineString();
			while (!isValidIP(ip)) {
				System.out.println("Geen geldig ip adres...");
				renderMenu(IP_MENU);
				ip = determineString();
				createSpace();
			}
			this.ip = ip;
			renderMenu(MAIN_MENU);
			choice = determineOption();
			createSpace();
			if (choice == 1) {
				boardUI.start();
			}
		} else if (choice == 2) {
			//TODO doe iets
		}
	}
	
	
	/**
	 * 
	 * @param noMenuItems
	 * @param menuItems(op index 0 altijd een uitleg bij een menu! zonder uitleg null houden!
	 */
	public void renderMenu(String[] menuItems){
		if(menuItems[0] != null && menuItems[0].contains("[naam]")){
			menuItems[0] = menuItems[0].replace("[naam]", playerName);
			System.out.println(menuItems[0]);
		}
		for(int i = 1; i < menuItems.length; i++){
			System.out.println(menuItems[i] + dots(menuItems[i]) + i);
		}
		if(menuItems.equals(NAME_MENU)){
			System.out.print("Typ uw naam en druk op enter: ");
		}else{
			System.out.print("\n" + "Voer uw keuze in:" + dots("Voer uw keuze in: ") + ".");
		}
	}
	
	public String dots(String string){
		int stringLength = string.toCharArray().length;
		String dots = "";
		for(int i = 0; i < AMOUNT_CHARACTERS - stringLength; i++){
			dots += ".";
		}
		return dots;
	}

	public int determineOption(){
		int in = scanner.nextInt();
		return in;
	}
	public String determineString(){
		String string = scanner.next();
		return string;
	}
	
	public void createSpace(){
		System.out.print("\n \n");
	}
	
	public boolean isValidIP(String ip){
		ip = ip.replace(".", " ");
		String[] ints = ip.split(" ");
		boolean isValidInt = true;
		for(String integer : ints){
			int i = Integer.parseInt(integer);
				if(i > 255){
					isValidInt = false;
				}
		}
		return (isValidInt == true && ints.length == 4);
	}	
}
