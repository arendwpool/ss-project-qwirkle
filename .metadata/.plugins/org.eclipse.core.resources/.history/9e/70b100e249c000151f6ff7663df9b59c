package server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

public class Server extends Thread {
    
	
	private static final String USAGE = "usage: " + Server.class.getName() + " <port>";
    private int port = 1337;
    private ServerSocket sockey;
    private BufferedReader in;
    private List<ClientHandler> threads;
    
    public static void main(String[] args) {
    	Server server = new Server();
    }
    
	public Server(Socket sockArg) throws IOException {
		threads = new ArrayList<ClientHandler>();
		in = new BufferedReader(new InputStreamReader(sockArg.getInputStream()));
		System.out.print("Please enter the port of the server ");
		String antw = null;
		try {
			String portInput = in.readLine();
			if (portInput.equals("")) {
				port = 1337;
			} else {
				port = Integer.parseInt(portInput);
			}
			try {
				System.err.println("          STARTING SERVER WITH IP: " 
						+ InetAddress.getLocalHost() + "\n               AND PORT: " + port + "\n");
			} catch (UnknownHostException e) {
				System.err.println("ERROR: couldn't figure out and display the ip, "
						+ "please try again");
				new Server(sockArg);
			}
			serverStart();
		} catch (NumberFormatException e) {
			System.err.println("ERROR: not a valid portnummer!");
			new Server(sockArg);
		}
	}
    
    public void run() {
    	
    }
    
    public void serverStart() {
    	
    }
    
    public void readInput() {
    	
    }
    
    public void determineCommandString() {
    	
    }
    
    /**
     * Add a ClientHandler to the collection of ClientHandlers.
     * @param handler ClientHandler that will be added
     */
    public void addHandler(ClientHandler handler) {
        threads.add(handler);
    }
    
    /**
     * Remove a ClientHandler from the collection of ClientHanlders. 
     * @param handler ClientHandler that will be removed
     */
    public void removeHandler(ClientHandler handler) {
        threads.remove(handler);	
    }
    
    /**
     * Sends a message using the collection of connected ClientHandlers
     * to all connected Clients.
     * @param msg message that is send
     * @throws IOException 
     */
    public void broadcast(String message) throws IOException {
    	 for (ClientHandler handler : threads) {
         	handler.sendMessage(message);
         }
    }
    
    public void shutdown() {
    	
    }

}